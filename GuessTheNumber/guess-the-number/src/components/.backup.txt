import React, { useState, useEffect, useRef } from "react";
import Header from "./Header";
import CreateGame from "./CreateGame";
import MakeGuess from "./MakeGuess";
import DisplayGuesses from "./DisplayGuesses";
import WinModal from "./WinModal";
import AlertModal from "./AlertModal";
import { STATUS_START, STATUS_IN_PROGRESS } from "../utils/constants";

function Game() {
  const [answer, setAnswer] = useState("");
  const [guess, setGuess] = useState("");
  const [results, setResults] = useState([]);
  const [gameStatus, setGameStatus] = useState(STATUS_START);
  const [showWinModal, setWinShowModal] = useState(false);
  const [showAlert, setShowAlert] = useState(false);
  const [alertMessage, setAlertMessage] = useState("");
  const [finalGuessCount, setFinalGuessCount] = useState(0);
  const inputRef = useRef(null);

  useEffect(() => {
    if (gameStatus === STATUS_IN_PROGRESS) {
      inputRef.current.focus();
    }
  }, [gameStatus]);

  function setupNewGame() {
    setGameStatus(STATUS_IN_PROGRESS);
    setResults([]);
  }

  function submitGuess(submittedGuess, answer) {
    let exact = 0;
    let partial = 0;
    let colorizedGuess = [];

    for (let i = 0; i < 4; i++) {
      if (submittedGuess.charAt(i) === answer.charAt(i)) {
        exact++;
        colorizedGuess.push(
          <span style={{ color: '#7DCEA0' }} key={i}>
            {submittedGuess.charAt(i)}
          </span>
        );        
      } else if (answer.includes(submittedGuess.charAt(i))) {
        partial++;
        colorizedGuess.push(
          <span style={{ color: '#E74C3C' }} key={i}>
            {submittedGuess.charAt(i)}
          </span>
        );
      } else {
        colorizedGuess.push(
          <span key={i}>
            {submittedGuess.charAt(i)}
          </span>
        );        
      }
    }

    const result = {
      text: `Exact: ${exact} Partial: ${partial}`,
      guess: colorizedGuess
    };
    
    //  Make copy with spread operator and update copy
    const newResults = [...results, result];
    setResults(newResults);

    // Check for winner
    if (exact === 4) {
      setFinalGuessCount(newResults.length);
      setWinShowModal(true);
      setGameStatus(STATUS_START);
      setResults([]);
    }
  }

  function showAlertModal(message) {
    setAlertMessage(message);
    setShowAlert(true);
  }

  function resetGame() {
    setGameStatus(STATUS_START);
    setResults([]);
    setGuess("");
  }

  return (
    <div
      className="w-1/3 min-w-[450px] bg-violet-200 rounded-lg border 
        border-gray-800 p-4 flex flex-col"
    >
      <Header />
      <div className="mt-4 bg-violet-100 rounded-lg border border-gray-800 p-4">
        <CreateGame
          setAnswer={setAnswer}
          setupNewGame={setupNewGame}
          gameStatus={gameStatus}
          showAlertModal={showAlertModal}
        />
      </div>
      <div className="mt-4 bg-violet-100 rounded-lg border border-gray-800 p-4">
        <MakeGuess
          guess={guess}
          setGuess={setGuess}
          submitGuess={submitGuess}
          answer={answer}
          inputRef={inputRef}
          gameStatus={gameStatus}
          showAlertModal={showAlertModal}
        />
      </div>
      <div className="mt-4 bg-violet-100 rounded-lg border border-gray-800 p-1">
        <DisplayGuesses results={results} />
      </div>
      <div className="mt-4 self-end">
        <button
          className="bg-violet-700 text-white rounded-lg py-1 px-2 
            text-xs hover:bg-violet-800 mb-4 mr-4"
          onClick={resetGame}
        >
          Reset Game
        </button>
      </div>
      <AlertModal
        isOpen={showAlert}
        message={alertMessage}
        onClose={() => setShowAlert(false)}
      />
      {showWinModal && (
        <WinModal
          closeModal={() => {
            setWinShowModal(false);
            setAnswer("");
          }}
          answer={answer}
          numberOfGuesses={finalGuessCount}
        />
      )}
      {/* <div className="text-center text-xs">
        <p>Debug Answer: {answer}</p>
        <p>Debug Guess: {guess}</p>
      </div> */}
    </div>
  );
}
export default Game;




import React from "react";

function AlertModal({ isOpen, message, onClose }) {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 flex items-center justify-center z-50 
      block bg-gray-800 bg-opacity-30">
      <div className="bg-gray-700 p-5 rounded-lg shadow-lg w-1/3 border 
        border-gray-300 min-w-[20rem] text-white">
        <div className="text-lg mb-4">{message}</div>
        <button
          onClick={onClose}
          className="mt-2 bg-blue-600 text-white rounded-lg py-1 px-2 hover:bg-blue-700"
        >
          OK
        </button>
      </div>
    </div>
  );
}

export default AlertModal;






import React from "react";
import { STATUS_START, STATUS_IN_PROGRESS } from "../utils/constants";

function MakeGuess({
  guess,
  setGuess,
  submitGuess,
  answer,
  inputRef,
  gameStatus,
  showAlertModal,
}) {
  function handleInputChange(event) {
    const value = event.target.value;
    if (/^\d{0,4}$/.test(value)) {
      setGuess(value);
    }
  }

  function handleSubmit() {
    if (guess.length === 4) {
      submitGuess(guess, answer);
      setGuess("");
      inputRef.current.focus();
    } else if (gameStatus === STATUS_START) {
      showAlertModal("Please start a game before submitting a guess.");
    } else {
      showAlertModal("Please enter a 4-digit number.");
    }
  }

  function handleKeyDown(event) {
    if (event.key === "Enter") {
      handleSubmit();
    }
  }

  return (
    <div className="flex justify-center items-center">
      <input
        ref={inputRef}
        type="text"
        value={guess}
        onChange={handleInputChange}
        onKeyDown={handleKeyDown}
        className="border rounded-lg p-2 mr-2 text-gray-800 border-gray-800"
        placeholder="Enter 4-digit number"
        disabled={gameStatus !== STATUS_IN_PROGRESS}
      />
      <button
        className="bg-purple-800 text-white rounded-lg py-2 px-4 hover:bg-purple-900"
        onClick={handleSubmit}
      >
        Submit Guess
      </button>
    </div>
  );
}
export default MakeGuess;









import React, { useState, useEffect, useRef } from "react";
import Header from "./Header";
import CreateGame from "./CreateGame";
import MakeGuess from "./MakeGuess";
import DisplayGuesses from "./DisplayGuesses";
import WinModal from "./WinModal";
// import AlertModal from "./AlertModal"
import { DialogButton, Alert } from "./DialogModal";
import { STATUS_START, STATUS_IN_PROGRESS } from "../utils/constants";

function Game() {
  const [answer, setAnswer] = useState("");
  const [guess, setGuess] = useState("");
  const [results, setResults] = useState([]);
  const [gameStatus, setGameStatus] = useState(STATUS_START);
  const [showWinModal, setWinShowModal] = useState(false);
  const [showAlert, setShowAlert] = useState(false);
  const [alertMessage, setAlertMessage] = useState("");
  const [finalGuessCount, setFinalGuessCount] = useState(0);
  const inputRef = useRef(null);

  useEffect(() => {
    if (gameStatus === STATUS_IN_PROGRESS) {
      inputRef.current.focus();
    }
  }, [gameStatus]);

  function setupNewGame() {
    setGameStatus(STATUS_IN_PROGRESS);
    setResults([]);
    setGuess("");
  }

  function submitGuess(submittedGuess, answer) {
    let exact = 0;
    let partial = 0;
    let colorizedGuess = [];

    for (let i = 0; i < 4; i++) {
      if (submittedGuess.charAt(i) === answer.charAt(i)) {
        exact++;
        colorizedGuess.push(
          <span style={{ color: "#7DCEA0" }} key={i}>
            {submittedGuess.charAt(i)}
          </span>
        );
      } else if (answer.includes(submittedGuess.charAt(i))) {
        partial++;
        colorizedGuess.push(
          <span style={{ color: "#E74C3C" }} key={i}>
            {submittedGuess.charAt(i)}
          </span>
        );
      } else {
        colorizedGuess.push(<span key={i}>{submittedGuess.charAt(i)}</span>);
      }
    }

    const result = {
      text: `Exact: ${exact} Partial: ${partial}`,
      guess: colorizedGuess,
    };

    //  Make copy with spread operator and update copy
    const newResults = [...results, result];
    setResults(newResults);

    // Check for winner
    if (exact === 4) {
      setFinalGuessCount(newResults.length);
      setWinShowModal(true);
      setGameStatus(STATUS_START);
      setResults([]);
    }
  }

  function showAlertModal(message) {
    setAlertMessage(message);
    setShowAlert(true);
  }

  function resetGame() {
    setGameStatus(STATUS_START);
    setResults([]);
    setGuess("");
  }

  return (
    <div
      className="w-1/3 min-w-[450px] bg-violet-200 rounded-lg border 
        border-gray-800 p-4 flex flex-col"
    >
      <Header />
      <div className="mt-4 bg-violet-100 rounded-lg border border-gray-800 p-4">
        <CreateGame
          setAnswer={setAnswer}
          setupNewGame={setupNewGame}
          gameStatus={gameStatus}
          showAlertModal={showAlertModal}
        />
      </div>
      <div className="mt-4 bg-violet-100 rounded-lg border border-gray-800 p-4">
        <MakeGuess
          guess={guess}
          setGuess={setGuess}
          submitGuess={submitGuess}
          answer={answer}
          inputRef={inputRef}
          gameStatus={gameStatus}
          showAlertModal={showAlertModal}
        />
      </div>
      <div className="mt-4 bg-violet-100 rounded-lg border border-gray-800 p-1">
        <DisplayGuesses results={results} />
      </div>
      <div className="mt-4 self-end">
        <button
          className="bg-violet-700 text-white rounded-lg py-1 px-2 
            text-xs hover:bg-violet-800 mb-4 mr-4"
          onClick={resetGame}
        >
          Reset Game
        </button>
      </div>
      {showAlert && (
        <Alert>
          <div className="text-center p-4">
            {alertMessage}
            </div>
            <DialogButton onClick={() => setShowAlert(false)}>
              OK
            </DialogButton>
         
        </Alert>
      )}
{/*       <AlertModal
        isOpen={showAlert}
        message={alertMessage}
        onClose={() => setShowAlert(false)}
      /> */}

      {showWinModal && (
        <WinModal
          closeModal={() => {
            setWinShowModal(false);
            setAnswer("");
          }}
          answer={answer}
          numberOfGuesses={finalGuessCount}
        />
      )}
      {/* <div className="text-center text-xs">
        <p>Debug Answer: {answer}</p>
        <p>Debug Guess: {guess}</p>
      </div> */}
    </div>
  );
}
export default Game;




import React from "react";

function WinModal({ closeModal, answer, numberOfGuesses }) {
  return (
    <div className="fixed inset-0 flex items-center justify-center z-50 
      block bg-gray-800 bg-opacity-30">
      <div className="bg-gray-700 p-5 rounded-lg shadow-lg w-1/3 border 
        border-gray-300 min-w-[20rem] text-white">
        <h1 className="text-2xl font-bold mb-4 text-blue-400">
          Congratulations!
        </h1>
        <p className="text-lg mb-4">
          You've won the game with {numberOfGuesses} guesses.
        </p>
        <p className="text-lg mb-4 ">The answer was {answer}.</p>
        <button
          className="bg-purple-500 hover:bg-purple-700 text-white font-bold 
            py-2 px-4 rounded"
          onClick={closeModal}
        >
          Close
        </button>
      </div>
    </div>
  );
}

export default WinModal;





import React from "react";

function AlertModal({ isOpen, message, onClose }) {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 flex items-center justify-center z-50 
      block bg-gray-800 bg-opacity-30">
      <div className="bg-gray-700 p-5 rounded-lg shadow-lg w-1/3 border 
        border-gray-300 min-w-[20rem] text-white">
        <div className="text-lg mb-4">{message}</div>
        <button
          onClick={onClose}
          className="mt-2 bg-blue-600 text-white rounded-lg py-1 px-2 hover:bg-blue-700"
        >
          OK
        </button>
      </div>
    </div>
  );
}

export default AlertModal;


import React from 'react';

function ConfirmModal({ isOpen, onCancel, onConfirm }) {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 flex items-center justify-center z-50 
      block bg-gray-800 bg-opacity-30">
      <div className="bg-gray-700 p-5 rounded-lg shadow-lg w-1/3 border 
        border-gray-300 min-w-[20rem] text-white">
        <h1 className="text-xl font-bold mb-4">Confirmation</h1>
        <p className="text-lg mb-4">
          There is already a game in process. Are you sure you want to start a new game?
        </p>
        <button
          className="bg-purple-500 hover:bg-purple-700 text-white font-bold 
            py-2 px-4 rounded mr-2"
          onClick={onCancel}
        >
          No
        </button>
        <button
          className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"
          onClick={onConfirm}
        >
          Yes
        </button>
      </div>
    </div>
  );
}

export default ConfirmModal;
